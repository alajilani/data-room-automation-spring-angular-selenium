{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, HostListener, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nlet Draggable = /*#__PURE__*/(() => {\n  class Draggable {\n    constructor(el, zone) {\n      this.el = el;\n      this.zone = zone;\n      this.onDragStart = new EventEmitter();\n      this.onDragEnd = new EventEmitter();\n      this.onDrag = new EventEmitter();\n    }\n\n    get pDraggableDisabled() {\n      return this._pDraggableDisabled;\n    }\n\n    set pDraggableDisabled(_pDraggableDisabled) {\n      this._pDraggableDisabled = _pDraggableDisabled;\n\n      if (this._pDraggableDisabled) {\n        this.unbindMouseListeners();\n      } else {\n        this.el.nativeElement.draggable = true;\n        this.bindMouseListeners();\n      }\n    }\n\n    ngAfterViewInit() {\n      if (!this.pDraggableDisabled) {\n        this.el.nativeElement.draggable = true;\n        this.bindMouseListeners();\n      }\n    }\n\n    bindDragListener() {\n      if (!this.dragListener) {\n        this.zone.runOutsideAngular(() => {\n          this.dragListener = this.drag.bind(this);\n          this.el.nativeElement.addEventListener('drag', this.dragListener);\n        });\n      }\n    }\n\n    unbindDragListener() {\n      if (this.dragListener) {\n        this.zone.runOutsideAngular(() => {\n          this.el.nativeElement.removeEventListener('drag', this.dragListener);\n          this.dragListener = null;\n        });\n      }\n    }\n\n    bindMouseListeners() {\n      if (!this.mouseDownListener && !this.mouseUpListener) {\n        this.zone.runOutsideAngular(() => {\n          this.mouseDownListener = this.mousedown.bind(this);\n          this.mouseUpListener = this.mouseup.bind(this);\n          this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n          this.el.nativeElement.addEventListener('mouseup', this.mouseUpListener);\n        });\n      }\n    }\n\n    unbindMouseListeners() {\n      if (this.mouseDownListener && this.mouseUpListener) {\n        this.zone.runOutsideAngular(() => {\n          this.el.nativeElement.removeEventListener('mousedown', this.mouseDownListener);\n          this.el.nativeElement.removeEventListener('mouseup', this.mouseUpListener);\n          this.mouseDownListener = null;\n          this.mouseUpListener = null;\n        });\n      }\n    }\n\n    drag(event) {\n      this.onDrag.emit(event);\n    }\n\n    dragStart(event) {\n      if (this.allowDrag() && !this.pDraggableDisabled) {\n        if (this.dragEffect) {\n          event.dataTransfer.effectAllowed = this.dragEffect;\n        }\n\n        event.dataTransfer.setData('text', this.scope);\n        this.onDragStart.emit(event);\n        this.bindDragListener();\n      } else {\n        event.preventDefault();\n      }\n    }\n\n    dragEnd(event) {\n      this.onDragEnd.emit(event);\n      this.unbindDragListener();\n    }\n\n    mousedown(event) {\n      this.handle = event.target;\n    }\n\n    mouseup(event) {\n      this.handle = null;\n    }\n\n    allowDrag() {\n      if (this.dragHandle && this.handle) return DomHandler.matches(this.handle, this.dragHandle);else return true;\n    }\n\n    ngOnDestroy() {\n      this.unbindDragListener();\n      this.unbindMouseListeners();\n    }\n\n  }\n\n  Draggable.ɵfac = function Draggable_Factory(t) {\n    return new (t || Draggable)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  Draggable.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: Draggable,\n    selectors: [[\"\", \"pDraggable\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostBindings: function Draggable_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"dragstart\", function Draggable_dragstart_HostBindingHandler($event) {\n          return ctx.dragStart($event);\n        })(\"dragend\", function Draggable_dragend_HostBindingHandler($event) {\n          return ctx.dragEnd($event);\n        });\n      }\n    },\n    inputs: {\n      scope: [\"pDraggable\", \"scope\"],\n      dragEffect: \"dragEffect\",\n      dragHandle: \"dragHandle\",\n      pDraggableDisabled: \"pDraggableDisabled\"\n    },\n    outputs: {\n      onDragStart: \"onDragStart\",\n      onDragEnd: \"onDragEnd\",\n      onDrag: \"onDrag\"\n    }\n  });\n  return Draggable;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Droppable = /*#__PURE__*/(() => {\n  class Droppable {\n    constructor(el, zone) {\n      this.el = el;\n      this.zone = zone;\n      this.onDragEnter = new EventEmitter();\n      this.onDragLeave = new EventEmitter();\n      this.onDrop = new EventEmitter();\n    }\n\n    ngAfterViewInit() {\n      if (!this.pDroppableDisabled) {\n        this.bindDragOverListener();\n      }\n    }\n\n    bindDragOverListener() {\n      if (!this.dragOverListener) {\n        this.zone.runOutsideAngular(() => {\n          this.dragOverListener = this.dragOver.bind(this);\n          this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n        });\n      }\n    }\n\n    unbindDragOverListener() {\n      if (this.dragOverListener) {\n        this.zone.runOutsideAngular(() => {\n          this.el.nativeElement.removeEventListener('dragover', this.dragOverListener);\n          this.dragOverListener = null;\n        });\n      }\n    }\n\n    dragOver(event) {\n      event.preventDefault();\n    }\n\n    drop(event) {\n      if (this.allowDrop(event)) {\n        DomHandler.removeClass(this.el.nativeElement, 'p-draggable-enter');\n        event.preventDefault();\n        this.onDrop.emit(event);\n      }\n    }\n\n    dragEnter(event) {\n      event.preventDefault();\n\n      if (this.dropEffect) {\n        event.dataTransfer.dropEffect = this.dropEffect;\n      }\n\n      DomHandler.addClass(this.el.nativeElement, 'p-draggable-enter');\n      this.onDragEnter.emit(event);\n    }\n\n    dragLeave(event) {\n      event.preventDefault();\n      DomHandler.removeClass(this.el.nativeElement, 'p-draggable-enter');\n      this.onDragLeave.emit(event);\n    }\n\n    allowDrop(event) {\n      let dragScope = event.dataTransfer.getData('text');\n\n      if (typeof this.scope == \"string\" && dragScope == this.scope) {\n        return true;\n      } else if (this.scope instanceof Array) {\n        for (let j = 0; j < this.scope.length; j++) {\n          if (dragScope == this.scope[j]) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    ngOnDestroy() {\n      this.unbindDragOverListener();\n    }\n\n  }\n\n  Droppable.ɵfac = function Droppable_Factory(t) {\n    return new (t || Droppable)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  Droppable.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: Droppable,\n    selectors: [[\"\", \"pDroppable\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostBindings: function Droppable_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"drop\", function Droppable_drop_HostBindingHandler($event) {\n          return ctx.drop($event);\n        })(\"dragenter\", function Droppable_dragenter_HostBindingHandler($event) {\n          return ctx.dragEnter($event);\n        })(\"dragleave\", function Droppable_dragleave_HostBindingHandler($event) {\n          return ctx.dragLeave($event);\n        });\n      }\n    },\n    inputs: {\n      scope: [\"pDroppable\", \"scope\"],\n      pDroppableDisabled: \"pDroppableDisabled\",\n      dropEffect: \"dropEffect\"\n    },\n    outputs: {\n      onDragEnter: \"onDragEnter\",\n      onDragLeave: \"onDragLeave\",\n      onDrop: \"onDrop\"\n    }\n  });\n  return Droppable;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DragDropModule = /*#__PURE__*/(() => {\n  class DragDropModule {}\n\n  DragDropModule.ɵfac = function DragDropModule_Factory(t) {\n    return new (t || DragDropModule)();\n  };\n\n  DragDropModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: DragDropModule\n  });\n  DragDropModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return DragDropModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DragDropModule, Draggable, Droppable }; //# sourceMappingURL=primeng-dragdrop.mjs.map","map":null,"metadata":{},"sourceType":"module"}